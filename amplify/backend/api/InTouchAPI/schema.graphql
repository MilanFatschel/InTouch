input CreateMessageInput {
	ID: String!
	content: String!
	author: String!
	createdAt: String!
}

input DeleteMessageInput {
	ID: String!
}

type Message {
	ID: String!
	content: String!
	author: String!
	createdAt: String!
}

type MessageConnection {
	items: [Message]
	nextToken: String
}

type Mutation {
	createMessage(input: CreateMessageInput!): Message
	updateMessage(input: UpdateMessageInput!): Message
	deleteMessage(input: DeleteMessageInput!): Message
}

type Query {
	getMessage(ID: String!): Message
	listMessages(filter: TableMessageFilterInput, limit: Int, nextToken: String): MessageConnection
}

type Subscription {
	onCreateMessage(
		ID: String,
		content: String,
		author: String,
		createdAt: String
	): Message
		@aws_subscribe(mutations: ["createMessage"])
	onUpdateMessage(
		ID: String,
		content: String,
		author: String,
		createdAt: String
	): Message
		@aws_subscribe(mutations: ["updateMessage"])
	onDeleteMessage(
		ID: String,
		content: String,
		author: String,
		createdAt: String
	): Message
		@aws_subscribe(mutations: ["deleteMessage"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableMessageFilterInput {
	ID: TableStringFilterInput
	content: TableStringFilterInput
	author: TableStringFilterInput
	createdAt: TableStringFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateMessageInput {
	ID: String!
	content: String
	author: String
	createdAt: String
}